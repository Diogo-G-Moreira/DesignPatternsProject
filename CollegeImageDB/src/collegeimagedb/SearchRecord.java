/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package collegeimagedb;

import Model.Database;
import com.mongodb.DBObject;
import java.util.ArrayList;
import java.util.Set;
import javax.swing.DefaultListModel;

/**
 *
 * @author Diogo
 */
public class SearchRecord extends javax.swing.JFrame {

    /**
     * Creates new form SearchRecord
     */
    Database db = new Database();
     DefaultListModel listModel;
    
    public SearchRecord() {
        boolean status = db.Connect("localhost", 27017);
        initComponents();
        
         Set<String> collections = db.getAllCollections();
        
          collectionsList.addItem("");
        for(String coll : collections){
            collectionsList.addItem(coll.toString());
        }
        
        
        /*Object selected = collectionList.getSelectedItem();
        if(selected.toString().equals("software"))
        {
            addSoftwarePanel.setVisible(true);
        }else if (selected.toString().equals(""))
        {
            addSoftwarePanel.setVisible(false);
        }*/
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        collectionsList = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        resultList = new javax.swing.JList<>();
        searchButton = new javax.swing.JButton();
        searchField = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Search Record");

        collectionsList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                collectionsListActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(resultList);

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addComponent(collectionsList, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jButton1)))
                        .addGap(58, 58, 58)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(88, 88, 88)
                        .addComponent(searchButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 411, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(29, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jButton1))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(collectionsList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchButton)
                    .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(49, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void collectionsListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_collectionsListActionPerformed
        // TODO add your handling code here:
        Object selected = collectionsList.getSelectedItem();
       listModel = new DefaultListModel();
        switch (selected.toString()){
            case "software":
                ArrayList<DBObject> softwareList = db.getSoftware();
                for(int i = 0; i < softwareList.size(); i++)
                {
                    String option = softwareList.get(i).get("title").toString() + " - " +
                    softwareList.get(i).get("version").toString();
            
                    listModel.addElement(option);
                }
                System.out.println("End");
                resultList.setModel(listModel);
                break;
            case "schoolLocation":
                  ArrayList<DBObject> locationList = db.getLocation();
                for(int i = 0; i < locationList.size(); i++)
                {
                    String option = locationList.get(i).get("classroom").toString();
                    listModel.addElement(option);
                }
                System.out.println("End");
                resultList.setModel(listModel);
                break;
                
            case "schoolHardware":
                  ArrayList<DBObject> hardwareList = db.getLocation();
                for(int i = 0; i < hardwareList.size(); i++)
                {
                    String option = hardwareList.get(i).get("machine").toString() + " - " +
                    hardwareList.get(i).get("name").toString() + " - " +
                    hardwareList.get(i).get("mac").toString();
            
                    listModel.addElement(option);
                }
                System.out.println("End");
                resultList.setModel(listModel);
                break;
                
            case "images":
                  ArrayList<DBObject> imageList = db.getImage();
                for(int i = 0; i < imageList.size(); i++)
                {
                    String option = imageList.get(i).get("image").toString();
            
                    listModel.addElement(option);
                }
                System.out.println("End");
                resultList.setModel(listModel);
                break;
                
    }
       
        
        
    }//GEN-LAST:event_collectionsListActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed

       // db.getFieldNames(collectionsList.getSelectedItem().toString());
     ArrayList <DBObject> searchResults = new ArrayList <DBObject>(); 
      listModel.removeAllElements();
      listModel.clear();
      searchResults = db.Search(collectionsList.getSelectedItem().toString(), searchField.getText().toString() ); 
      
      ArrayList <String> secondList = new ArrayList<String>(); 
      if(collectionsList.getSelectedItem().toString().equals("school"))
      {
                for(int i = 0; i < searchResults.size(); i++)
                {
                    String option = searchResults.get(i).get("title").toString() + " - " +
                    searchResults.get(i).get("version").toString();
            
                    secondList.add(option);
            
                    listModel.addElement(option);
                }
                System.out.println("End");
                resultList.setModel(listModel);
      }
      else if(collectionsList.getSelectedItem().toString().equals( "schoolLocation"))
      {
                for(int i = 0; i < searchResults.size(); i++)
                {
                    String option = searchResults.get(i).get("classroom").toString();
                    secondList.add(option);
            
                    listModel.addElement(option);
                }
                System.out.println("End");
                resultList.setModel(listModel);
      }
      
            else if(collectionsList.getSelectedItem().toString().equals( "schoolHardware"))
      {
                for(int i = 0; i < searchResults.size(); i++)
                {
                    String option = searchResults.get(i).get("machine").toString() + " - " +
                    searchResults.get(i).get("name").toString() + " - " +
                    searchResults.get(i).get("mac").toString();
                    secondList.add(option);
            
                    listModel.addElement(option);
                }
                System.out.println("End");
                resultList.setModel(listModel);
      }
      
             else if(collectionsList.getSelectedItem().toString().equals("images"))
      {
                for(int i = 0; i < searchResults.size(); i++)
                {
                    String option = searchResults.get(i).get("image").toString();
            
                    listModel.addElement(option);
                }
                System.out.println("End");
                resultList.setModel(listModel);
      }     
      
        // TODO add your handling code here:
    }//GEN-LAST:event_searchButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SearchRecord.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SearchRecord.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SearchRecord.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SearchRecord.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SearchRecord().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> collectionsList;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<String> resultList;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField searchField;
    // End of variables declaration//GEN-END:variables
}
